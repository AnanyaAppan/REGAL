select min(ps_supplycost)
from partsupp, supplier, nation, region
where s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey;
--------------------------------------------------------------------------------------------------------

Database connection established!
select ps_supplycost, ps_availqty, ps_comment from partsupp, supplier, nation, region where s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey; 
base cardinality
PreproBase.makeDataStruct_cardinality 5
PreproBase.makeDataStruct_attribute {3=ps_comment, 2=ps_availqty, 1=ps_supplycost}
PreproBase.makeDataStruct_class {0=count, 1=java.math.BigDecimal, 2=java.lang.Integer, 3=java.lang.String}
__________Preprocessing base table 24.0 ms
select min(ps_supplycost) from partsupp, supplier, nation, region where s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey; 
PreproBase.makeDataStruct_class_query {1=java.math.BigDecimal}
{1=java.math.BigDecimal}
PreproBase.result_cardinality 1
PreproBase.result_column {1=min(ps_supplycost)}
PreproBase.result_class {1=java.math.BigDecimal}
MapBoth.pairs_{1=[1]}
MapBoth.produce_lattice_root_[[1]]
__________Query output table cum Mapping table 8.0 ms
Used memory is megabytes: 7 MB
lattice_root [min(ps_supplycost)]
BuildLattice.lattice_size 1 keyness_count 1
Keyness_[min(ps_supplycost)]
Time_TD 0.0 Time_BU 0.0
Phase1.lattice_root {min(ps_supplycost)=1} num_candidates 1
[(min(ps_supplycost) )]
__________diff_grpby 4.0 ms
SingleConstraints.aggregation (1, {min=[1], avg=[1], max=[1], sum=[1]})
__________diff_aggre 0.0 ms
__________diff_granu 3.0 ms
__________diff_filter 1.0 ms
Used memory2 is megabytes: 4 MB
