select p_size, MIN(l_extendedprice) as MIN_revenue
from lineitem, part
where p_partkey = l_partkey and p_size between 1 and 15
group by p_size;

--------------------------------------------------------------------------------------------------------

--------------Pre processing over--------------1.332778
{'p_size': ['part.p_size.0'], 'min_revenue': ['lineitem.l_extendedprice.0']}
----Obtained CAND lists----1.526087
----trying for depth 0----1.526121
-------Exploring Instance Tree-------1.553312
-------Obtained merge list-------1.553525
----trying for depth 1----1.553540
-------Exploring Instance Tree-------1.578874
-------Update Star Centres-------1.579029
-------Update Star Centres-------1.579148
-------Update Star Centres-------1.579261
-------Obtained merge list-------1.579485
-------Obtained star set-------1.579511
-------Obtained merged stars-------1.580579
-------Initialized TID lists-------1.580605
-------Gen Lattice-------1.583276
SELECT * FROM  part part_0_1 , lineitem lineitem_1 WHERE lineitem_1.l_partkey=part_0_1.p_partkey
--------------Post processing over--------------1.619009
Database connection established!
SELECT * FROM  part part_0_1 , lineitem lineitem_1 WHERE lineitem_1.l_partkey=part_0_1.p_partkey
base cardinality
PreproBase.makeDataStruct_cardinality 5
PreproBase.makeDataStruct_attribute {5=L_PARTKEY, 10=L_DISCOUNT, 4=L_ORDERKEY, 9=L_EXTENDEDPRICE, 3=P_RETAILPRICE, 8=L_QUANTITY, 2=P_SIZE, 7=L_LINENUMBER, 1=P_PARTKEY, 6=L_SUPPKEY, 11=L_TAX}
PreproBase.makeDataStruct_class {0=count, 1=java.lang.Integer, 2=java.lang.Integer, 3=java.math.BigDecimal, 4=java.lang.Integer, 5=java.lang.Integer, 6=java.lang.Integer, 7=java.lang.Integer, 8=java.math.BigDecimal, 9=java.math.BigDecimal, 10=java.math.BigDecimal, 11=java.math.BigDecimal}
__________Preprocessing base table 49.0 ms
select p_size, MIN(l_extendedprice) as MIN_revenue from lineitem, part where p_partkey = l_partkey and p_size between 1 and 15 group by p_size; 
PreproBase.makeDataStruct_class_query {1=java.lang.Integer, 2=java.math.BigDecimal}
{1=java.lang.Integer, 2=java.math.BigDecimal}
PreproBase.result_cardinality 2
PreproBase.result_column {2=MIN_revenue, 1=p_size}
PreproBase.result_class {1=java.lang.Integer, 2=java.math.BigDecimal}
MapBoth.pairs_{1=[2], 2=[9]}
MapBoth.produce_lattice_root_[[2, 9]]
__________Query output table cum Mapping table 13.0 ms
Used memory is megabytes: 7 MB
lattice_root [p_size, MIN_revenue]
BuildLattice.lattice_size 3 keyness_count 2
Keyness_[p_size, MIN_revenue]
Keyness_[p_size]
Keyness_[MIN_revenue]
Containment_0.0 ms_[p_size, MIN_revenue]_true
Time_TD 2.0 Time_BU 0.0
Phase1.lattice_root {MIN_revenue=9, p_size=2} num_candidates 3
[(p_size ), (MIN_revenue ), (p_size MIN_revenue )]
__________diff_grpby 7.0 ms
SingleConstraints.aggregation (2, {min=[9], avg=[9], max=[9], sum=[9]})
SingleConstraints.aggregation (1, {min=[2], avg=[2], max=[2], sum=[2, 6, 7]})
Grouping_[MIN_revenue]_aggreColumns_[1]
MapRID = {[13309.60]={1=[7]}, [22824.48]={1=[1]}}
combinaBID [9]
getBaseCols [1, 2, 3, 4, 5, 6, 7, 8, 10, 11]
Read_partial_data_5.0_ms
Column_id_1 Aggregations_{min=[2], avg=[2], max=[2], sum=[2, 6, 7]}
Grouping_[p_size]_aggreColumns_[2]
MapRID = {[1]={2=[22824.48]}, [7]={2=[13309.60]}}
combinaBID [2]
getBaseCols [1, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Read_partial_data_0.0_ms
Column_id_2 Aggregations_{min=[9], avg=[9], max=[9], sum=[9]}
Phase2.combnode [MIN_revenue] 
aggregation(list of pair) [(1, {min=[2], avg=[2], max=[2], sum=[2]})]
Phase2.combnode [p_size] 
aggregation(list of pair) [(2, {min=[9], avg=[9], max=[9], sum=[9]})]
Phase2.treenode {MIN_revenue=9, p_size=2}
Phase2.combnode [MIN_revenue]
aggregation 4 [{1=(min, 2)}, {1=(avg, 2)}, {1=(max, 2)}, {1=(sum, 2)}]
Phase2.combnode [p_size]
aggregation 4 [{2=(min, 9)}, {2=(avg, 9)}, {2=(max, 9)}, {2=(sum, 9)}]
__________diff_aggre 2.0 ms
__________diff_granu 10.0 ms
FilterSelection_latticeRoot_{MIN_revenue=9, p_size=2}
[9]
FilterSelection.grouping_(MIN_revenue )_multi-dimensions_[1, 2, 3, 4, 5, 6, 7, 8, 10, 11]_aggregation-combinations_4
combnode = (MIN_revenue )
FilterSelection.matrix_[13309.60]_boundingValues_{1=7}
FilterSelection.matrix_[22824.48]_boundingValues_{1=1}
time1_1.0_time2_0.0_time3_0.0 = 2.0_ms
Start Experiment from One Dimensi
Created bounding box 1 (min, 2)
1 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
1 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
0 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
0 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
1 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
1 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
0 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
0 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
1 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
1 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
3 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
3 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
4 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
4 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
2 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
2 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
2 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
2 1
Created bounding box 1 (sum, 2)
Created bounding box 1 (min, 2)
1 1
Created bounding box 1 (avg, 2)
cross aggregate no valid
not any box returns
Created bounding box 1 (max, 2)
1 1
Created bounding box 1 (sum, 2)
------------------------one dimension--------------------- 14.0_ms
6 (0, 0) (0, 4)
OneDimenFilter BaseIndex=6 (1, 1) (1, 5) [(sum, 2)]
7 (0, 4) (0, 4)
OneDimenFilter BaseIndex=7 (1, 5) (1, 5) [(min, 2)]
7 (0, 0) (0, 4)
OneDimenFilter BaseIndex=7 (1, 1) (1, 5) [(sum, 2)]
2 (0, 0) (0, 1)
OneDimenFilter BaseIndex=2 (1, 1) (1, 7) [(sum, 2)]
10 (0, 2) (0, 2)
OneDimenFilter BaseIndex=10 (0.04, 0.10) (0.04, 0.10) [(min, 2)]
1 (0, 1) (0, 1)
OneDimenFilter BaseIndex=1 (1, 2) (1, 2) [(max, 2)]
2 (0, 0) (0, 1)
OneDimenFilter BaseIndex=2 (1, 1) (1, 7) [(max, 2)]
2 (0, 0) (0, 1)
OneDimenFilter BaseIndex=2 (1, 1) (1, 7) [(min, 2)]
4 (0, 0) (0, 0)
OneDimenFilter BaseIndex=4 (1, 1) (1, 1) [(min, 2)]
8 (0, 2) (0, 4)
OneDimenFilter BaseIndex=8 (8.00, 24.00) (8.00, 36.00) [(max, 2)]
11 (0, 1) (0, 2)
OneDimenFilter BaseIndex=11 (0.02, 0.04) (0.02, 0.06) [(max, 2)]
6 (0, 3) (0, 4)
OneDimenFilter BaseIndex=6 (1, 4) (1, 5) [(min, 2)]
7 (0, 4) (0, 4)
OneDimenFilter BaseIndex=7 (1, 5) (1, 5) [(max, 2)]
5 (0, 0) (0, 1)
OneDimenFilter BaseIndex=5 (1, 1) (1, 2) [(sum, 2)]
11 (0, 0) (0, 2)
OneDimenFilter BaseIndex=11 (0.02, 0.02) (0.02, 0.06) [(sum, 2)]
4 (0, 0) (0, 0)
OneDimenFilter BaseIndex=4 (1, 1) (1, 1) [(max, 2)]
10 (0, 2) (0, 2)
OneDimenFilter BaseIndex=10 (0.04, 0.10) (0.04, 0.10) [(max, 2)]
5 (0, 1) (0, 1)
OneDimenFilter BaseIndex=5 (1, 2) (1, 2) [(min, 2)]
3 (0, 1) (0, 1)
OneDimenFilter BaseIndex=3 (901.00, 902.00) (901.00, 902.00) [(min, 2)]
6 (0, 3) (0, 4)
OneDimenFilter BaseIndex=6 (1, 4) (1, 5) [(max, 2)]
11 (0, 1) (0, 2)
OneDimenFilter BaseIndex=11 (0.02, 0.04) (0.02, 0.06) [(min, 2)]
3 (0, 1) (0, 1)
OneDimenFilter BaseIndex=3 (901.00, 902.00) (901.00, 902.00) [(max, 2)]
4 (0, 0) (0, 0)
OneDimenFilter BaseIndex=4 (1, 1) (1, 1) [(sum, 2)]
10 (0, 0) (0, 2)
OneDimenFilter BaseIndex=10 (0.04, 0.04) (0.04, 0.10) [(sum, 2)]
1 (0, 1) (0, 1)
OneDimenFilter BaseIndex=1 (1, 2) (1, 2) [(min, 2)]
8 (0, 0) (0, 4)
OneDimenFilter BaseIndex=8 (8.00, 8.00) (8.00, 36.00) [(sum, 2)]
8 (0, 2) (0, 4)
OneDimenFilter BaseIndex=8 (8.00, 24.00) (8.00, 36.00) [(min, 2)]
5 (0, 1) (0, 1)
OneDimenFilter BaseIndex=5 (1, 2) (1, 2) [(max, 2)]
3 (0, 0) (0, 1)
OneDimenFilter BaseIndex=3 (901.00, 901.00) (901.00, 902.00) [(sum, 2)]
1 (0, 0) (0, 1)
OneDimenFilter BaseIndex=1 (1, 1) (1, 2) [(sum, 2)]
time for one/two/three dimensi_17.0_ms
[2]
FilterSelection.grouping_(p_size )_multi-dimensions_[1, 3, 4, 5, 6, 7, 8, 9, 10, 11]_aggregation-combinations_4
combnode = (p_size )
FilterSelection.matrix_[1]_boundingValues_{2=22824.48}
FilterSelection.matrix_[7]_boundingValues_{2=13309.60}
time1_0.0_time2_0.0_time3_0.0 = 0.0_ms
Start Experiment from One Dimensi
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (min, 9)
fill_matrix_cost_0.0_ms
Created bounding box 1 (avg, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (max, 9)
cross aggregate no valid
not any box returns
fill_matrix_cost_0.0_ms
Created bounding box 1 (sum, 9)
cross aggregate no valid
not any box returns
------------------------one dimension--------------------- 10.0_ms
9 (0, 0) (0, 1)
OneDimenFilter BaseIndex=9 (13309.60, 13309.60) (13309.60, 21168.23) [(sum, 9)]
10 (0, 2) (0, 2)
OneDimenFilter BaseIndex=10 (0.04, 0.10) (0.04, 0.10) [(min, 9)]
10 (0, 2) (1, 2)
7 (0, 2) (0, 4)
OneDimenFilter BaseIndex=7 (1, 3) (1, 5) [(min, 9)]
9 (0, 0) (0, 1)
OneDimenFilter BaseIndex=9 (13309.60, 13309.60) (13309.60, 21168.23) [(avg, 9)]
10 (0, 2) (1, 2)
11 (0, 0) (0, 2)
OneDimenFilter BaseIndex=11 (0.02, 0.02) (0.02, 0.06) [(min, 9)]
10 (0, 2) (1, 2)
6 (0, 0) (0, 4)
OneDimenFilter BaseIndex=6 (1, 1) (1, 5) [(min, 9)]
9 (0, 0) (0, 1)
OneDimenFilter BaseIndex=9 (13309.60, 13309.60) (13309.60, 21168.23) [(max, 9)]
7 (0, 2) (1, 4)
9 (0, 0) (0, 4)
OneDimenFilter BaseIndex=9 (13309.60, 13309.60) (13309.60, 45983.16) [(min, 9)]
6 (0, 0) (0, 1)
OneDimenFilter BaseIndex=6 (1, 1) (1, 2) [(avg, 9)]
8 (0, 0) (0, 1)
OneDimenFilter BaseIndex=8 (8.00, 8.00) (8.00, 17.00) [(sum, 9)]
4 (0, 0) (0, 0)
OneDimenFilter BaseIndex=4 (1, 1) (1, 1) [(min, 9)]
8 (0, 0) (0, 1)
OneDimenFilter BaseIndex=8 (8.00, 8.00) (8.00, 17.00) [(max, 9)]
5 (0, 0) (0, 1)
OneDimenFilter BaseIndex=5 (1, 1) (1, 2) [(min, 9)]
6 (0, 0) (0, 1)
OneDimenFilter BaseIndex=6 (1, 1) (1, 2) [(sum, 9)]
7 (0, 2) (1, 3)
7 (0, 2) (1, 3)
8 (0, 0) (0, 4)
OneDimenFilter BaseIndex=8 (8.00, 8.00) (8.00, 36.00) [(min, 9)]
6 (0, 0) (0, 1)
OneDimenFilter BaseIndex=6 (1, 1) (1, 2) [(max, 9)]
3 (0, 0) (0, 1)
OneDimenFilter BaseIndex=3 (901.00, 901.00) (901.00, 902.00) [(min, 9)]
8 (0, 0) (0, 1)
OneDimenFilter BaseIndex=8 (8.00, 8.00) (8.00, 17.00) [(avg, 9)]
1 (0, 0) (0, 1)
OneDimenFilter BaseIndex=1 (1, 1) (1, 2) [(min, 9)]
time for one/two/three dimensi_11.0_ms
__________diff_filter 34.0 ms
Used memory2 is megabytes: 5 MB

Obtained Queries 
---------------------------------------------------------------------------------------------------------------

select p_size, sum(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_extendedprice >= 13309.60 and l_extendedprice <= 21168.23
group by p_size;

select p_size, max(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_extendedprice >= 13309.60 and l_extendedprice <= 45983.16
group by p_size;

select p_size, min(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_extendedprice >= 13309.60 and l_extendedprice <= 21168.23
group by p_size;

select p_size, min(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_discount >= 0.04 and l_discount <= 0.10
group by p_size;

select p_size, min(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_tax >= 0.04 and l_tax <= 0.06
group by p_size;

select p_size, min(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_quantity >= 8.00 and l_quantity <= 36.00
group by p_size;

select p_size, avg(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_quantity >= 8.00 and l_quantity <= 17.00
group by p_size;

select p_size, sum(l_extendedprice)
from lineitem, part
where p_partkey = l_partkey and l_quantity >= 8.00 and l_quantity <= 17.00
group by p_size;


